package example.micronaut

import io.micronaut.core.type.Argument
import io.micronaut.http.HttpRequest
import io.micronaut.http.HttpResponse
import io.micronaut.http.HttpStatus
import io.micronaut.http.client.StreamingHttpClient
import io.micronaut.http.client.annotation.Client
import io.micronaut.test.extensions.spock.annotation.MicronautTest
import spock.lang.Shared
import spock.lang.Specification
import reactor.core.publisher.Flux
import org.reactivestreams.Publisher
import jakarta.inject.Inject

@MicronautTest // <1>
class GithubControllerSpec extends Specification {

    @Inject
    @Client("/")
    StreamingHttpClient client // <2>

    @Shared
    List<String> expectedReleases = ["Micronaut 2.5.0", "Micronaut 2.4.4", "Micronaut 2.4.3"]

    void 'verify github releases can be fetched with low level HttpClient'() {
        when:
        HttpRequest request = HttpRequest.GET('/github/releases-lowlevel')

        HttpResponse<List<GithubRelease>> rsp = client.toBlocking().exchange(request, // <3>
                Argument.listOf(GithubRelease)) // <4>

        then: 'the endpoint can be accessed'
        rsp.status == HttpStatus.OK // <5>
        rsp.body() // <6>

        when:
        List<GithubRelease> releases = rsp.body()

        then:
        for (String name : expectedReleases) {
            assert releases*.name.contains(name)
        }
    }

    void 'verify github releases can be fetched with compile-time autogenerated @Client'() {
        when:
        HttpRequest request = HttpRequest.GET('/github/releases-lowlevel')

        Publisher<GithubRelease> githubReleaseStream = client.jsonStream(request, GithubRelease) // <7>
        Iterable<GithubRelease> githubReleases = Flux.from(githubReleaseStream).toIterable()

        then:
        for (String name : expectedReleases) {
            assert githubReleases*.name.contains(name)
        }
    }
}
