import io.micronaut.guides.GenerateGuideZip
import io.micronaut.guides.GuideProjectGenerator
import io.micronaut.guides.IndexGenerator
import io.micronaut.guides.TestScriptGenerator
import io.micronaut.guides.ThemeProcessor
import io.micronaut.guides.GitDiffUtils

plugins {
    id 'groovy'
    id("org.asciidoctor.jvm.convert") version "3.3.2"
}

apply from: "gradle/asciidoc.gradle"

repositories {
    mavenCentral()
    jcenter()
}

ext {
    codeDir = new File(buildDir, 'code')
    distDir = new File(buildDir, 'dist')
    guidesDir = new File(projectDir, 'guides')
    metadataConfigName = 'metadata.json'
}

task cleanAsciidoctorFolder {
    group 'guides'
    description 'Cleans src/docs/asciidoc folder'
    doLast {
        File f = file('src/docs/asciidoc')
        if (f.exists()) {
            f.deleteDir()
        }
    }
}

task copyImagesToDist(type: Copy) {
    group 'guides'
    description 'Copies images from src/docs/images to build/dist/images folder'
    from 'src/docs/images'
    into "$distDir/images"
    include '**/*.png',
            '**/*.jpg',
            '**/*.svg',
            '**/*.gif'
}

task copyStylesheetsToDist(type: Copy) {
    group 'guides'
    description 'Copies CSS files from assets/stylesheets to build/dist folder'
    from 'assets/stylesheets'
    into distDir
    include '*.css'
}

task copyJavaScriptToDist(type: Copy) {
    group 'guides'
    description 'Copies JS files from assets/js to build/dist folder'
    from 'assets/js'
    into distDir
    include '*.js'
}

task copyHtmlToDist(type: Copy) {
    group 'guides'
    description 'Copies HTML generated from Asciidoc from build/docs/asciidoc to build/dist'
    from "$buildDir/docs/asciidoc"
    into distDir
    exclude 'common-*.html'
}

task createDist {
    group 'guides'
    description 'Creates build/dist folder with static assets'
    dependsOn 'copyImagesToDist',
              'copyStylesheetsToDist',
              'copyJavaScriptToDist'
}

clean.dependsOn 'cleanAsciidoctorFolder'
build.dependsOn 'asciidoctor'

asciidoctor.dependsOn 'generateCodeZip'
asciidoctor.finalizedBy 'copyHtmlToDist'

task generateSampleProjects {
    group 'guides'
    description 'Generates guide applications at build/code'
    doLast {
        if (!codeDir.exists()) {
            codeDir.mkdirs()
        }

        try (GuideProjectGenerator generator = new GuideProjectGenerator()) {
            generator.generate(guidesDir, codeDir, metadataConfigName, projectDir)
        }
    }
    finalizedBy(
            'generateTestScript',
            'generateGuidesIndex',
            'generateGuidesJsonMetadata',
            'themeGuides'
    )
}

task generateTestScript {
    group 'guides'
    description 'Generates a test.sh to run every guide test at build/code'
    doLast {
        File testScript = new File(codeDir, "test.sh")
        testScript.createNewFile()
        List<String> changedFiles = []
        boolean generateTestScript = true
        if (System.getenv('GITHUB_WORKFLOW')) {
            changedFiles = GitDiffUtils.filesChanged()
            generateTestScript = !GitDiffUtils.onlyImagesOrMarkdownOrAsciidocChanged(changedFiles)
        }
        testScript.text = generateTestScript
                ? TestScriptGenerator.generateScript(guidesDir, metadataConfigName, false, changedFiles)
                : TestScriptGenerator.EMPTY_SCRIPT
        testScript.executable = true
    }
}

task generateCodeZip {
    group 'guides'
    description 'Generates a ZIP file for each application at build/code into build/dist'
    dependsOn 'generateSampleProjects'
    dependsOn 'createDist'
    doLast {
        codeDir.eachDir { dir ->
            File zipFile = new File(distDir, dir.name + '.zip')
            GenerateGuideZip.compressZipfile(dir.path, zipFile.path)
        }
    }
}

task generateGuidesIndex {
    group 'guides'
    description 'Generates an index.html with all the guides'
    doLast {
        File template = new File(projectDir, "assets/template.html")
        IndexGenerator.generateGuidesIndex(template, guidesDir, distDir, metadataConfigName)
    }
}

task generateGuidesJsonMetadata {
    group 'guides'
    description 'Generates a guides.json with the metadata for all the guides'
    doLast {
        if (!distDir.exists()) {
            distDir.mkdirs()
        }
        File guidesJson = new File(distDir, 'guides.json')
        guidesJson.createNewFile()
        guidesJson.text = IndexGenerator.generateGuidesJsonIndex(guidesDir, metadataConfigName)
    }
}

task themeGuides {
    group 'guides'
    description 'Generates an index.html with all the guides'
    doLast {
        File template = new File(projectDir, "assets/template.html")
        ThemeProcessor.applyThemes(template, distDir, guidesDir, metadataConfigName)
    }
    mustRunAfter('copyHtmlToDist')
}
