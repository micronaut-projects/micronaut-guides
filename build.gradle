import io.micronaut.guides.GenerateGuideZip
import io.micronaut.guides.GuideProjectGenerator
import io.micronaut.guides.IndexGenerator
import io.micronaut.guides.ThemeProcessor
import io.micronaut.guides.TestScriptGenerator

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath group: 'io.micronaut.docs', name: 'micronaut-docs-asciidoc-extensions', version: '1.0.25'
    }
}

plugins {
    id 'groovy'
    id("org.asciidoctor.jvm.convert") version "3.3.1"
}

apply from: "gradle/asciidoc.gradle"

repositories {
    mavenCentral()
    jcenter()
}

task cleanAsciidoctorFolder {
    group 'guides'
    description 'Cleans src/docs/asciidoc folder'
    doLast {
        File f = new File('src/docs/asciidoc')
        if (f.exists()) {
            f.deleteDir()
        }
    }
}
task copyImagesToDist(type: Copy) {
    group 'guides'
    description 'Copies images from src/docs/images to build/dist/images folder'
    from 'src/docs/images'
    into "${project.buildDir}/dist/images"
    include '*.png'
    include '*.svg'
    include '*.gif'
}

task copyStylesheetsToDist(type: Copy) {
    group 'guides'
    description 'Copies css files from assets/stylesheets to build/dist folder'
    from 'assets/stylesheets'
    into "${project.buildDir}/dist"
    include '*.css'
}
task copyHtmlToDist(type: Copy) {
    group 'guides'
    description 'Copies HTML generated from Asciidoc from build/docs/asciidoc to build/dist'
    from "${project.buildDir}/docs/asciidoc"
    into "${project.buildDir}/dist"
    exclude 'common-*.html'
}
task createDist {
    description 'Creates build/dist folder with static assets'
    dependsOn('copyImagesToDist')
    dependsOn('copyStylesheetsToDist')
}
clean.dependsOn('cleanAsciidoctorFolder')
build.dependsOn('asciidoctor')

asciidoctor.dependsOn('generateCodeZip')
asciidoctor.finalizedBy('copyHtmlToDist')

task generateSampleProjects {
    description 'Generates guide applications at buid/code'
    group 'guides'
    ext {
        metadataConfigName = 'metadata.json'
        output = "$buildDir/code"
        guides = "${projectDir}/guides"
    }
    doLast {
        GuideProjectGenerator generator = new GuideProjectGenerator()
        generator.generate(new File(guides), new File(output), metadataConfigName, true, new File("${projectDir}/src/docs/asciidoc"))
        generator.close()
    }
    finalizedBy('generateTestScript')
    finalizedBy('generateGuidesIndex')
    finalizedBy('generateGuidesJsonMetadata')
    finalizedBy('themeGuides')
}

task generateTestScript {
    group 'guides'
    description 'Generates a test.sh to runs every guide test at build/code'
    ext {
        excludeDirs = ['images']
        stopIfFailure = false
    }
    doLast {
        File guides = new File(generateSampleProjects.guides)
        File output = new File(generateSampleProjects.output + "/test.sh")
        output.createNewFile()
        output.text = TestScriptGenerator.generateScript(guides, generateSampleProjects.metadataConfigName, stopIfFailure)
        output.setExecutable(true)
    }
}

task generateCodeZip {
    group 'guides'
    description 'Generates a ZIP file for each application at build/code into build/dist'
    dependsOn 'generateSampleProjects'
    dependsOn 'createDist'
    doLast {
        new File(generateSampleProjects.output).eachDir { dir ->
            String filename = projectDir.absolutePath + "/build/dist" + dir.absolutePath.substring(dir.absolutePath.lastIndexOf('/')) + ".zip"
            GenerateGuideZip.compressZipfile(dir.absolutePath, filename)
        }
    }
}

task generateGuidesIndex {
    group 'guides'
    description 'Generates an index.html with all the guides'
    doLast {
        File template = new File(projectDir.absolutePath + "/assets/template.html")
        File guides = new File(generateSampleProjects.guides)
        File output = new File("${project.buildDir}/dist/index.html")
        output.createNewFile()
        output.text = IndexGenerator.generateGuidesIndex(template, guides, generateSampleProjects.metadataConfigName)
    }
}

task generateGuidesJsonMetadata {
    group 'guides'
    description 'Generates a guides.json with the metadata for all the guides'
    doLast {
        File guides = new File(generateSampleProjects.guides)
        File output = new File("${project.buildDir}/dist/guides.json")
        output.createNewFile()
        output.text = IndexGenerator.generateGuidesJsonIndex(guides, generateSampleProjects.metadataConfigName)
    }
}
task themeGuides {
    group 'guides'
    description 'Generates an index.html with all the guides'
    doLast {
        File template = new File(projectDir.absolutePath + "/assets/template.html")
        File guides = new File(generateSampleProjects.guides)
        File dist = new File("${project.buildDir}/dist")
        ThemeProcessor.applyThemes(template, dist, guides, generateSampleProjects.metadataConfigName)
    }
    mustRunAfter('copyHtmlToDist')
}